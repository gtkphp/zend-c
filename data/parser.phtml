<?php
$meta #
#semval($) $this->semValue
#semval($,%t) $this->semValue
#semval(%n) $stackPos-(%l-%n)
#semval(%n,%t) $stackPos-(%l-%n)

namespace Zend\C\Engine;

use Zend\C\Engine\Lexer;
use Zend\C\Engine\Node\Stmt\ValueStmt\Expr;
use Zend\C\Engine\Node;
use Zend\C\Engine\IR;

use Zend\C\Engine\ParserAbstract;

#include;

/* This is an automatically GENERATED file, which should not be manually edited.
 */
class Parser extends ParserAbstract
{

    function __construct(Lexer $lexer) {
        parent::__construct($lexer);
        $this->tokenToSymbolMapSize = #(YYMAXLEX);
        $this->actionTableSize      = #(YYLAST);
        $this->gotoTableSize        = #(YYGLAST);

        $this->invalidSymbol       = #(YYBADCH);
        $this->errorSymbol         = #(YYINTERRTOK);
        $this->defaultAction       = #(YYDEFAULT);
        $this->unexpectedTokenRule = #(YYUNEXPECTED);

        $this->YY2TBLSTATE = #(YY2TBLSTATE);
        $this->numNonLeafStates  = #(YYNLSTATES);

        $this->symbolToName = array(
                #listvar terminals
            );

        $this->tokenToSymbol = array(
                #listvar yytranslate
            );

        $this->action = array(
                #listvar yyaction
            );

        $this->actionCheck = array(
                #listvar yycheck
            );

        $this->actionBase = array(
                #listvar yybase
            );

        $this->actionDefault = array(
                #listvar yydefault
            );

        $this->goto = array(
                #listvar yygoto
            );

        $this->gotoCheck = array(
                #listvar yygcheck
            );

        $this->gotoBase = array(
                #listvar yygbase
            );

        $this->gotoDefault = array(
                #listvar yygdefault
            );

        $this->ruleToNonTerminal = array(
                #listvar yylhs
            );

        $this->ruleToLength = array(
                #listvar yylen
            );
#if -t

        $this->productions = array(
                #production-strings;
            );
#endif

    }
    protected function initReduceCallbacks() {
        $this->reduceCallbacks = [
#reduce
            %n => function ($stackPos) {
               %b
            },
#noact
            %n => function ($stackPos) {
                $this->semValue = $this->semStack[$stackPos];
        },
#endreduce
        ];
    }
}
#tailcode;